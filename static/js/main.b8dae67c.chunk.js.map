{"version":3,"sources":["components/controls/style.module.scss","components/controls/index.js","components/grid/index.js","App.js","serviceWorker.js","index.js","components/grid/style.module.scss"],"names":["module","exports","Controls","controlsClassNames","classNames","controls","closed","this","props","open","className","twoButtonsContainer","button","seedButton","type","title","onClick","onSeed","disabled","simulating","stopping","class","icon","name","gridSizeContainer","gridSize","inputsContainer","inputGrp","step","min","max","pattern","value","rows","onChange","e","onRowsUpdate","target","id","columns","onColumnsUpdate","simulateButton","onSimulate","stopButton","onStop","resetButton","onReset","hideShowContainer","setOpen","Component","Grid","life","gridContainer","grid","style","width","height","currentField","map","r","i","key","row","el","isAlive","Node","cell","alive","App","state","stop","Life","_","prevState","setState","timeout","nextState","Number","seed","simulate","reset","Field","nextField","randIntGenerator","getRandInt","Array","j","x","y","set","c","aliveCount","dr","dc","limit","Math","round","random","ms","Promise","resolve","setTimeout","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.b8dae67c.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"controls\":\"style_controls__1Q1XW\",\"hideShowContainer\":\"style_hideShowContainer__2Obkp\",\"icon\":\"style_icon__uf0oj\",\"closed\":\"style_closed__3lAKZ\",\"button\":\"style_button__1EBgb\",\"inputsContainer\":\"style_inputsContainer__1azqE\",\"inputGrp\":\"style_inputGrp__2V_Nu\",\"disabled\":\"style_disabled__8daVN\",\"gridSizeContainer\":\"style_gridSizeContainer__2gn9B\",\"gridSize\":\"style_gridSize__1d9hV\",\"cellsButton\":\"style_cellsButton___9okg\",\"seedButton\":\"style_seedButton__jjBYg\",\"simulateButton\":\"style_simulateButton__14qTA\",\"stopButton\":\"style_stopButton__FjSnv\",\"resetButton\":\"style_resetButton__iTMWo\",\"twoButtonsContainer\":\"style_twoButtonsContainer__2E7Ap\"};","import React, { Component } from \"react\";\nimport classNames from \"classnames\";\n\nimport {\n  controls,\n  closed,\n  hideShowContainer,\n  button,\n  seedButton,\n  cellsButton,\n  simulateButton,\n  stopButton,\n  resetButton,\n  icon,\n  inputsContainer,\n  inputGrp,\n  gridSizeContainer,\n  gridSize,\n  twoButtonsContainer,\n  disabled,\n} from './style.module.scss';\n\nexport default class Controls extends Component {\n\n  render() {\n    const controlsClassNames = classNames(\n      controls, \n      {\n        [closed]: !this.props.open,\n      }\n    );\n    return (\n      <div className={controlsClassNames}>\n        <div>\n          <div className={twoButtonsContainer}>\n            <button\n              className={classNames(button, seedButton)}\n              type=\"button\"\n              title=\"Seed Randomly\"\n              onClick={this.props.onSeed}\n              disabled={this.props.simulating || this.props.stopping}\n            >\n              <ion-icon class={icon} name=\"infinite-outline\"></ion-icon> Seed\n            </button>\n            {/*\n            <button\n              className={classNames(button, cellsButton)}\n              type=\"button\"\n              title=\"Add cells manually\"\n              disabled={this.props.simulating || this.props.stopping}\n            >\n              <ion-icon class={icon} name=\"flower-outline\"></ion-icon> Cells\n            </button> */}\n          </div>\n          <div className={gridSizeContainer}>\n            <span className={gridSize}>Grid size</span>\n            <div className={inputsContainer}>\n              <div className={classNames(inputGrp, {[disabled]: this.props.simulating || this.props.stopping})}>\n                <span>\n                  <ion-icon class={icon} name=\"ellipsis-vertical-outline\"></ion-icon>\n                </span>\n                <input\n                  type=\"number\"\n                  step=\"1\"\n                  min=\"1\"\n                  max=\"32\"\n                  pattern=\"[0-9]+\"\n                  name=\"rows_count\"\n                  value={this.props.rows}\n                  onChange={e => this.props.onRowsUpdate(e.target.value)}\n                  disabled={this.props.simulating || this.props.stopping}\n                />\n              </div>\n              <div className={classNames(inputGrp, {[disabled]: this.props.simulating || this.props.stopping})}>\n                <span>\n                  <ion-icon class={icon} name=\"ellipsis-horizontal-outline\"></ion-icon>\n                </span>\n                <input\n                  type=\"number\"\n                  step=\"1\"\n                  min=\"1\"\n                  max=\"32\"\n                  pattern=\"[0-9]+\"\n                  name=\"columns_count\"\n                  id=\"columns_count\"\n                  value={this.props.columns}\n                  onChange={e => this.props.onColumnsUpdate(e.target.value)}\n                  disabled={this.props.simulating || this.props.stopping}\n                />\n              </div>\n            </div>\n          </div>\n          <div className={twoButtonsContainer}>\n            <button\n              className={classNames(button, simulateButton)}\n              type=\"button\"\n              title=\"Simulate\"\n              onClick={this.props.onSimulate}\n              disabled={this.props.simulating || this.props.stopping}\n            >\n              <ion-icon class={icon} name=\"planet-outline\"></ion-icon> Simulate\n            </button>\n            <button\n              className={classNames(button, stopButton)}\n              type=\"button\"\n              title=\"Stop the simulation\"\n              onClick={this.props.onStop}\n              disabled={this.props.stopping || !this.props.simulating}\n            >\n              <ion-icon class={icon} name=\"stop-outline\"></ion-icon> Stop\n            </button>\n          </div>\n          <button\n            className={classNames(button, resetButton)}\n            type=\"button\"\n            title=\"Reset\"\n            onClick={this.props.onReset}\n            disabled={this.props.simulating || this.props.stopping}\n          >\n            <ion-icon class={icon} name=\"refresh-outline\"></ion-icon> Reset\n          </button>\n        </div>\n        <div className={hideShowContainer}>\n          <button\n            className={button}\n            type=\"button\"\n            onClick={()=>this.props.setOpen(!this.props.open)}\n          >\n            <ion-icon class={icon} name=\"arrow-forward-outline\"></ion-icon>\n          </button>\n        </div>\n      </div>\n    );\n  }\n}\n","import React, { Component } from \"react\";\n\nimport {gridContainer, grid, row, cell, alive} from \"./style.module.scss\";\nimport classNames from \"classnames\";\n\nexport default class Grid extends Component {\n\n  render() {\n    let {life, rows, columns} = this.props;\n    return (\n      <div className={gridContainer}>\n        <div className={grid} style={{\n            width: 16 * columns + 2,\n            height: 16 * rows + 2,\n          }}>\n          {life.currentField.grid.map((r, i) => (\n            <div key={`row-${i}`} className={row} style={{width: 16 * columns}}>\n              {r.map((el, i) => <Node isAlive={el} key={i}/>)}\n            </div>\n          ))}\n        </div>\n      </div>\n    );\n  }\n}\n\n\nclass Node extends Component {\n  render() {\n    const {isAlive} = this.props;\n    return (\n      <div className={classNames(cell, {[alive]: isAlive})} />\n    );\n  }\n}\n","import React, { Component } from \"react\";\n\nimport Controls from \"./components/controls\";\nimport Grid from \"./components/grid\";\n\nimport \"./App.scss\";\n\nexport default class App extends Component {\n  \n  constructor() {\n    super();\n    this.state = {\n      rows: 10,\n      columns: 10,\n      open: true,\n      life: null,\n      stop: false,\n      simulating: false,\n    };\n    this.state.life = new Life(this.state.rows, this.state.columns);\n  }\n\n  componentDidUpdate(_, prevState) {\n    if(prevState.rows !== this.state.rows || prevState.columns !== this.state.columns)\n      this.setState({life: new Life(this.state.rows, this.state.columns)});\n  }\n\n  async simulate() {\n    this.setState({simulating: true})\n    while(!this.state.stop) {\n      await timeout(100);\n      this.state.life.nextState();\n      this.setState({})\n    }\n    this.setState({stop: false, simulating: false})\n  }\n  stop() {\n    this.setState({stop: true})\n  }\n  reset() {\n    this.setState({life: new Life(this.state.rows, this.state.columns)});\n  }\n\n  render() {\n    // console.log(this.state.life)\n    return (\n      <>\n        <Controls\n          rows={this.state.rows}\n          columns={this.state.columns}\n          onRowsUpdate={(value) => this.setState({rows: Number(value)})}\n          onColumnsUpdate={(value) => this.setState({columns: Number(value)})}\n          open={this.state.open}\n          setOpen={open => this.setState({open})}\n          simulating={this.state.simulating}\n          stopping={this.state.stop}\n          onSeed={() => {\n            this.state.life.seed()\n            this.setState({})\n          }}\n          onSimulate={() => this.simulate()}\n          onStop={() => this.stop()}\n          onReset={() => this.reset()}\n        />\n        <Grid life={this.state.life} rows={this.state.rows} columns={this.state.columns} />\n        {/* <div id=\"notifications\"></div> */}\n      </>\n    );\n  }\n}\n\n\nclass Life {\n  currentField;\n  nextField;\n  rows;\n  columns;\n  constructor(rows, columns) {\n    this.rows = Number(rows);\n    this.columns = Number(columns);\n    this.currentField = new Field(rows, columns);\n    this.nextField = new Field(rows, columns);\n  }\n  seed(randIntGenerator = getRandInt) {\n    const grid = new Array(this.rows);\n    for(let i = 0; i < this.rows; ++i) {\n      grid[i] = new Array(this.columns);\n      for(let j = 0; j < this.columns; ++j) {\n        grid[i][j] = false;\n      }\n    }\n    this.currentField.grid = grid;\n    for(let i = 0; i < this.rows * this.columns / 4; ++i) {\n      let x = randIntGenerator(this.rows), y = randIntGenerator(this.columns);\n      // console.log({x, y})\n      this.currentField.set(x, y, true);\n    }\n  }\n  nextState() {\n    for(let r = 0; r < this.rows; ++r) {\n      for(let c = 0; c < this.columns; ++c) {\n        this.nextField.set(r, c, this.currentField.nextState(r, c));\n      }\n    }\n    [this.currentField, this.nextField] = [this.nextField, this.currentField]\n  }\n}\nclass Field {\n  rows;\n  columns;\n  grid;\n  constructor(rows, columns) {\n    this.rows = rows;\n    this.columns = columns;\n    const grid = new Array(rows);\n    for(let i = 0; i < rows; ++i) {\n      grid[i] = new Array(columns);\n      for(let j = 0; j < columns; ++j) {\n        grid[i][j] = false;\n      }\n    }\n    this.grid = grid;\n  }\n  set(r, c, isAlive) {\n    this.grid[r][c] = isAlive;\n  }\n  isAlive(r, c) {\n    r = (r + this.rows) % this.rows;\n    c = (c + this.columns) % this.columns;\n    return this.grid[r][c];\n  }\n  nextState(r, c) {\n    let aliveCount = 0;\n    for(let dr = -1; dr <= 1; ++dr) {\n      for(let dc = -1; dc <= 1; ++dc) {\n        if(dr === 0 && dc === 0) continue;\n        else if(this.isAlive(r + dr, c + dc)) ++aliveCount;\n      }\n    }\n    return aliveCount === 3 || (aliveCount === 2 && this.isAlive(r, c));\n  }\n}\n\nconst getRandInt = (limit) => {\n  return Math.round(Math.random() * (limit - 1));\n}\nconst timeout = ms => {\n  return new Promise(resolve => setTimeout(resolve, ms));\n}\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.scss';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"row\":\"style_row__3HpJF\",\"cell\":\"style_cell__A_ag4\",\"alive\":\"style_alive__2bccc\",\"grid\":\"style_grid__1xLxb\",\"gridContainer\":\"style_gridContainer__2T5E1\"};"],"sourceRoot":""}